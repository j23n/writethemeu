# Generated by Django 5.2.6 on 2025-10-16 13:34

from django.db import migrations

from letters.constants import normalize_german_state


def populate_missing_wahlkreis_ids(apps, schema_editor):
    """Assign wahlkreis_ids to list-based constituencies that don't have them."""
    Constituency = apps.get_model('letters', 'Constituency')

    # Map state names to codes
    STATE_NAME_TO_CODE = {
        'Baden-Württemberg': 'BW',
        'Bayern': 'BY',
        'Berlin': 'BE',
        'Brandenburg': 'BB',
        'Bremen': 'HB',
        'Hamburg': 'HH',
        'Hessen': 'HE',
        'Mecklenburg-Vorpommern': 'MV',
        'Niedersachsen': 'NI',
        'Nordrhein-Westfalen': 'NW',
        'Rheinland-Pfalz': 'RP',
        'Saarland': 'SL',
        'Sachsen': 'SN',
        'Sachsen-Anhalt': 'ST',
        'Schleswig-Holstein': 'SH',
        'Thüringen': 'TH',
    }

    # Process FEDERAL_STATE_LIST constituencies
    federal_lists = Constituency.objects.filter(
        wahlkreis_id__isnull=True,
        scope='FEDERAL_STATE_LIST'
    )

    for const in federal_lists:
        state_name = const.metadata.get('state') if const.metadata else None
        if state_name:
            state_code = STATE_NAME_TO_CODE.get(state_name, state_name[:2].upper())
            const.wahlkreis_id = f'FEDERAL-LIST-{state_code}'
            const.save(update_fields=['wahlkreis_id'])
            print(f'  Set {const.name} → {const.wahlkreis_id}')
        else:
            # Handle the "Landesliste DE" case (if any)
            const.wahlkreis_id = 'FEDERAL-LIST-DE'
            const.save(update_fields=['wahlkreis_id'])
            print(f'  Set {const.name} → {const.wahlkreis_id}')

    # Process STATE_LIST constituencies
    state_lists = Constituency.objects.filter(
        wahlkreis_id__isnull=True,
        scope='STATE_LIST'
    )

    for const in state_lists:
        state_name = const.metadata.get('state') if const.metadata else None
        if state_name:
            state_code = STATE_NAME_TO_CODE.get(state_name, state_name[:2].upper())
            const.wahlkreis_id = f'STATE-LIST-{state_code}'
            const.save(update_fields=['wahlkreis_id'])
            print(f'  Set {const.name} → {const.wahlkreis_id}')


def reverse_populate(apps, schema_editor):
    """Reverse migration: set wahlkreis_id back to NULL for list constituencies."""
    Constituency = apps.get_model('letters', 'Constituency')

    # Clear wahlkreis_ids for list-based constituencies
    Constituency.objects.filter(
        wahlkreis_id__startswith='FEDERAL-LIST-'
    ).update(wahlkreis_id=None)

    Constituency.objects.filter(
        wahlkreis_id__startswith='STATE-LIST-'
    ).update(wahlkreis_id=None)


class Migration(migrations.Migration):

    dependencies = [
        ('letters', '0016_remove_constituency_fk_fields'),
    ]

    operations = [
        migrations.RunPython(populate_missing_wahlkreis_ids, reverse_populate),
    ]
