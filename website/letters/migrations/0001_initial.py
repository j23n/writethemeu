# Generated by Django 5.2.6 on 2025-10-04 20:10

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ElectoralDistrict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('code', models.CharField(blank=True, max_length=50)),
                ('external_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('level', models.CharField(choices=[('FEDERAL', 'Federal district'), ('STATE', 'State district'), ('REGIONAL', 'Regional district')], max_length=20)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['parliament__level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Constituency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('external_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('scope', models.CharField(choices=[('FEDERAL_DISTRICT', 'Federal electoral district'), ('FEDERAL_STATE_LIST', 'Bundestag state list'), ('FEDERAL_LIST', 'Bundestag federal list'), ('STATE_DISTRICT', 'State electoral district'), ('STATE_REGIONAL_LIST', 'State regional list'), ('STATE_LIST', 'State wide list'), ('EU_AT_LARGE', 'EU at large')], max_length=30)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('districts', models.ManyToManyField(blank=True, related_name='constituencies', to='letters.electoraldistrict')),
            ],
            options={
                'ordering': ['parliament_term__parliament__level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Letter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('body', models.TextField()),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('FLAGGED', 'Flagged for Review'), ('REMOVED', 'Removed')], default='PUBLISHED', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='letters', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-published_at'],
            },
        ),
        migrations.CreateModel(
            name='Parliament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the parliament', max_length=255)),
                ('level', models.CharField(choices=[('EU', 'European Union'), ('FEDERAL', 'Federal'), ('STATE', 'State'), ('LOCAL', 'Local')], max_length=20)),
                ('legislative_body', models.CharField(help_text="e.g., 'Bundestag', 'Bayerischer Landtag', 'Gemeinderat MÃ¼nchen'", max_length=255)),
                ('region', models.CharField(help_text='Geographic identifier (state code, municipality code, etc.)', max_length=100)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, help_text='For hierarchical relationships (e.g., local within state)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='letters.parliament')),
            ],
            options={
                'verbose_name': 'Parliament',
                'verbose_name_plural': 'Parliaments',
                'ordering': ['level', 'name'],
            },
        ),
        migrations.AddField(
            model_name='electoraldistrict',
            name='parliament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='electoral_districts', to='letters.parliament'),
        ),
        migrations.CreateModel(
            name='ParliamentTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parliament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='terms', to='letters.parliament')),
            ],
            options={
                'ordering': ['parliament__level', 'parliament__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='IdentityVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(default='stub_provider', max_length=100)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('VERIFIED', 'Verified'), ('FAILED', 'Failed'), ('EXPIRED', 'Expired')], default='PENDING', max_length=20)),
                ('street_address', models.CharField(blank=True, max_length=255)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, default='DE', max_length=32)),
                ('verification_data', models.JSONField(blank=True, default=dict)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('constituency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_residents', to='letters.constituency')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='identity_verification', to=settings.AUTH_USER_MODEL)),
                ('parliament', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_residents', to='letters.parliament')),
                ('parliament_term', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_residents', to='letters.parliamentterm')),
            ],
        ),
        migrations.AddField(
            model_name='constituency',
            name='parliament_term',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='constituencies', to='letters.parliamentterm'),
        ),
        migrations.CreateModel(
            name='Committee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parliament_term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='committees', to='letters.parliamentterm')),
            ],
            options={
                'ordering': ['parliament_term__parliament__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('SPAM', 'Spam'), ('OFFENSIVE', 'Offensive Content'), ('MISINFORMATION', 'Misinformation'), ('OTHER', 'Other')], max_length=20)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending Review'), ('REVIEWED', 'Reviewed'), ('DISMISSED', 'Dismissed'), ('ACTION_TAKEN', 'Action Taken')], default='PENDING', max_length=20)),
                ('moderator_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('letter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='letters.letter')),
                ('reporter', models.ForeignKey(blank=True, help_text='User who made the report (null for anonymous)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reports_made', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports_reviewed', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Representative',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('election_mode', models.CharField(choices=[('DIRECT', 'Direct mandate'), ('STATE_LIST', 'State list mandate'), ('STATE_REGIONAL_LIST', 'State regional list mandate'), ('FEDERAL_LIST', 'Federal list mandate'), ('EU_LIST', 'EU list mandate')], max_length=25)),
                ('external_id', models.CharField(max_length=100, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('party', models.CharField(blank=True, max_length=100)),
                ('role', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, max_length=50)),
                ('website', models.URLField(blank=True)),
                ('focus_areas', models.TextField(blank=True)),
                ('term_start', models.DateField(blank=True, null=True)),
                ('term_end', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('constituencies', models.ManyToManyField(blank=True, related_name='representatives', to='letters.constituency')),
                ('parliament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='representatives', to='letters.parliament')),
                ('parliament_term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='representatives', to='letters.parliamentterm')),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.AddField(
            model_name='letter',
            name='representative',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='letters', to='letters.representative'),
        ),
        migrations.CreateModel(
            name='CommitteeMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('member', 'Member'), ('alternate_member', 'Alternate Member'), ('chair', 'Chair/Vorsitz'), ('deputy_chair', 'Deputy Chair/Stellv. Vorsitz'), ('foreperson', 'Foreperson/Obfrau/Obmann')], max_length=50)),
                ('additional_roles', models.JSONField(blank=True, default=list)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('committee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='letters.committee')),
                ('representative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='committee_memberships', to='letters.representative')),
            ],
            options={
                'ordering': ['representative', 'committee'],
            },
        ),
        migrations.CreateModel(
            name='Signature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signed_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.TextField(blank=True)),
                ('letter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='signatures', to='letters.letter')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='signatures', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-signed_at'],
            },
        ),
        migrations.AddField(
            model_name='letter',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='letters', to='letters.tag'),
        ),
        migrations.CreateModel(
            name='TopicArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True)),
                ('primary_level', models.CharField(choices=[('EU', 'European Union'), ('FEDERAL', 'Federal (Bund)'), ('STATE', 'State (Land)'), ('LOCAL', 'Local (Kommune)'), ('MIXED', 'Mixed Competency')], max_length=20)),
                ('competency_type', models.CharField(choices=[('EXCLUSIVE', 'Exclusive Federal'), ('CONCURRENT', 'Concurrent Federal/State'), ('STATE', 'State (LÃ¤nder)'), ('LOCAL', 'Local (Municipal)')], max_length=20)),
                ('keywords', models.TextField()),
                ('legal_basis', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent_topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subtopics', to='letters.topicarea')),
            ],
            options={
                'verbose_name': 'Topic Area',
                'verbose_name_plural': 'Topic Areas',
                'ordering': ['primary_level', 'name'],
            },
        ),
        migrations.AddField(
            model_name='committee',
            name='topic_area',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='committees', to='letters.topicarea'),
        ),
        migrations.AddIndex(
            model_name='parliament',
            index=models.Index(fields=['level', 'region'], name='letters_par_level_c852f7_idx'),
        ),
        migrations.AddIndex(
            model_name='electoraldistrict',
            index=models.Index(fields=['parliament', 'code'], name='letters_ele_parliam_9472c8_idx'),
        ),
        migrations.AddIndex(
            model_name='electoraldistrict',
            index=models.Index(fields=['parliament', 'level'], name='letters_ele_parliam_53bb35_idx'),
        ),
        migrations.AddIndex(
            model_name='parliamentterm',
            index=models.Index(fields=['parliament', 'name'], name='letters_par_parliam_792915_idx'),
        ),
        migrations.AddIndex(
            model_name='identityverification',
            index=models.Index(fields=['status', 'user'], name='letters_ide_status_cffd46_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='constituency',
            unique_together={('parliament_term', 'name', 'scope')},
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['status', '-created_at'], name='letters_rep_status_735d23_idx'),
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['letter', '-created_at'], name='letters_rep_letter__fe909b_idx'),
        ),
        migrations.AddIndex(
            model_name='representative',
            index=models.Index(fields=['is_active', 'parliament_term'], name='letters_rep_is_acti_31161e_idx'),
        ),
        migrations.AddIndex(
            model_name='representative',
            index=models.Index(fields=['last_name', 'first_name'], name='letters_rep_last_na_36c011_idx'),
        ),
        migrations.AddIndex(
            model_name='committeemembership',
            index=models.Index(fields=['representative'], name='letters_com_represe_0a772a_idx'),
        ),
        migrations.AddIndex(
            model_name='committeemembership',
            index=models.Index(fields=['committee'], name='letters_com_committ_d7d9d7_idx'),
        ),
        migrations.AddIndex(
            model_name='committeemembership',
            index=models.Index(fields=['role'], name='letters_com_role_22257b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='committeemembership',
            unique_together={('representative', 'committee')},
        ),
        migrations.AddIndex(
            model_name='signature',
            index=models.Index(fields=['letter', '-signed_at'], name='letters_sig_letter__2ef549_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='signature',
            unique_together={('user', 'letter')},
        ),
        migrations.AddIndex(
            model_name='letter',
            index=models.Index(fields=['-published_at'], name='letters_let_publish_c36136_idx'),
        ),
        migrations.AddIndex(
            model_name='letter',
            index=models.Index(fields=['status', '-published_at'], name='letters_let_status_79a7bc_idx'),
        ),
        migrations.AddIndex(
            model_name='letter',
            index=models.Index(fields=['representative', '-published_at'], name='letters_let_represe_bb1b51_idx'),
        ),
        migrations.AddIndex(
            model_name='topicarea',
            index=models.Index(fields=['primary_level'], name='letters_top_primary_0ce7e3_idx'),
        ),
        migrations.AddIndex(
            model_name='topicarea',
            index=models.Index(fields=['competency_type'], name='letters_top_compete_a6ce7f_idx'),
        ),
        migrations.AddIndex(
            model_name='committee',
            index=models.Index(fields=['parliament_term'], name='letters_com_parliam_f8fba8_idx'),
        ),
        migrations.AddIndex(
            model_name='committee',
            index=models.Index(fields=['topic_area'], name='letters_com_topic_a_7a8efd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='committee',
            unique_together={('parliament_term', 'name')},
        ),
    ]
